import sys

# flags = ["-O0", "-O1", "-O2", "-O3", "-Os", "-Oz", "-Ofast", "-Og", "-fno-strict-aliasing", "-fstrict-aliasing", "-fno-builtin", "-ffast-math", "-ffinite-math-only", "-fno-signed-zeros", "-fno-trapping-math", "-ftrapping-math", "-funsafe-math-optimizations", "-fassociative-math", "-fno-math-errno", "-fno-rounding-math", "-freciprocal-math", "-fno-semantic-interposition", "-fno-stack-limit", "-ffast-math", "-ffloat-store", "-finline-functions", "-finline-hint-functions", "-finline-limit=n", "-finline-small-functions", "-finline-small-functions-call-threshold=n", "-finline-threshold=n", "-fipa-cp", "-fipa-icf", "-fipa-sra", "-fmerge-all-constants", "-fmerge-constants", "-fmodulo-sched", "-fno-move-loop-invariants", "-fno-peephole2", "-fprefetch-loop-arrays", "-fprofile-sample-use", "-fprofile-use", "-fpartial-inlining", "-fpeel-loops", "-fpipeline-sink", "-freciprocal-math", "-freorder-blocks-algorithm=algorithm", "-freorder-blocks", "-freorder-functions", "-freorder-blocks-and-partition", "-frerun-cse-after-loop", "-fthread-jumps", "-ftree-bit-ccp", "-ftree-builtin-call-dce", "-ftree-ccp", "-ftree-ch", "-ftree-coalesce-vars", "-ftree-copy-prop", "-ftree-dce", "-ftree-dominator-opts", "-ftree-dse", "-ftree-forwprop", "-ftree-fre", "-ftree-loop-distribution", "-ftree-loop-distribute-patterns", "-ftree-loop-if-convert", "-ftree-loop-im", "-ftree-loop-ivcanon", "-ftree-loop-optimize", "-ftree-parallelize-loops=n", "-ftree-phiprop", "-ftree-pre", "-ftree-partial-pre", "-ftree-partial-pre-inc", "-ftree-reassoc", "-ftree-scev-cprop", "-ftree-slp-vectorize", "-ftree-sra", "-ftree-switch-conversion", "-ftree-tail-merge", "-ftree-ter", "-ftree-vrp", "-ftree-vectorize", "-funroll-loops", "-funroll-all-loops", "-funswitch-loops", "-fvect-cost-model", "-fvectorize", "-fwhole-program", "-fipa-cp-clone", "-fno-math-errno", "-fno-trapping-math", "-fassociative-math", "-ffinite-math-only", "-ffp-contract=style", "-fno-signed-zeros", "-ftrapping-math", "-fwrapv", "-ftree-vectorizer-verbose=n", "-fno-stack-limit", "-fno-stack-protector", "-fstack-protector", "-fstack-protector-all", "-fstack-protector-strong", "-fstack-protector-explicit", "-fno-stack-clash-protection", "-fno-stack-limit", "-fno-stack-usage", "-fsanitize=address", "-fsanitize=thread", "-fsanitize=memory", "-fsanitize=undefined", "-fsanitize=leak", "-fno-sanitize=address", "-fno-sanitize=thread", "-fno-sanitize=memory", "-fno-sanitize=undefined", "-fno-sanitize=leak", "-fsanitize-address-use-after-scope", "-fno-sanitize-address-use-after-scope", "-fsanitize-memory-track-origins", "-fno-sanitize-memory-track-origins", "-fsanitize-memory-use-after-dtor", "-fno-sanitize-memory-use-after-dtor", "-fsanitize-undefined-trap-on-error", "-fno-sanitize-undefined-trap-on-error", "-freciprocal-math", "-fno-semantic-interposition", "-fno-signed-zeros", "-fno-stack-limit", "-fno-trapping-math", "-fwrapv", "-fomit-frame-pointer", "-fno-omit-frame-pointer", "-targetlibinfo", "-tti", "-tbaa", "-scoped-noalias", "-assumption-cache-tracker", "-profile-summary-info", "-forceattrs", "-inferattrs", "-ipsccp", "-called-value-propagation", "-globalopt", "-domtree", "-mem2reg", "-deadargelim", "-basicaa", "-aa", "-loops", "-lazy-branch-prob", "-lazy-block-freq", "-opt-remark-emitter", "-instcombine", "-simplifycfg", "-basiccg", "-globals-aa", "-prune-eh", "-always-inline", "-functionattrs", "-sroa", "-memoryssa", "-early-cse-memssa", "-speculative-execution", "-lazy-value-info", "-jump-threading", "-correlated-propagation", "-libcalls-shrinkwrap", "-branch-prob", "-block-freq", "-pgo-memop-opt", "-tailcallelim", "-reassociate", "-loop-simplify", "-lcssa-verification", "-lcssa", "-scalar-evolution", "-loop-rotate", "-licm", "-loop-unswitch", "-indvars", "-loop-idiom", "-loop-deletion", "-loop-unroll", "-memdep", "-memcpyopt", "-sccp", "-demanded-bits", "-bdce", "-dse", "-postdomtree", "-adce", "-barrier", "-rpo-functionattrs", "-globaldce", "-float2int", "-loop-accesses", "-loop-distribute", "-loop-vectorize", "-loop-load-elim", "-alignment-from-assumptions", "-strip-dead-prototypes", "-loop-sink", "-instsimplify", "-div-rem-pairs", "-verify", "-ee-instrument", "-early-cse", "-lower-expect"]
# flags = ["-O0", "-O1", "-O2", "-O3", "-Os", "-Oz", "-Ofast", "-Og", "-fno-strict-aliasing", "-fstrict-aliasing", "-fno-builtin", "-ffast-math", "-ffinite-math-only", "-fno-signed-zeros", "-fno-trapping-math", "-ftrapping-math", "-funsafe-math-optimizations", "-fassociative-math", "-fno-math-errno", "-fno-rounding-math", "-freciprocal-math", "-fno-semantic-interposition", "-fno-stack-limit", "-ffloat-store", "-finline-functions", "-finline-hint-functions", "-finline-limit=n", "-finline-small-functions", "-finline-small-functions-call-threshold=n", "-finline-threshold=n", "-fipa-cp", "-fipa-icf", "-fipa-sra", "-fmerge-all-constants", "-fmerge-constants", "-fmodulo-sched", "-fno-move-loop-invariants", "-fno-peephole2", "-fprefetch-loop-arrays", "-fprofile-sample-use", "-fprofile-use", "-fpartial-inlining", "-fpeel-loops", "-fpipeline-sink", "-freorder-blocks-algorithm=algorithm", "-freorder-blocks", "-freorder-functions", "-freorder-blocks-and-partition", "-frerun-cse-after-loop", "-fthread-jumps", "-ftree-bit-ccp", "-ftree-builtin-call-dce", "-ftree-ccp", "-ftree-ch", "-ftree-coalesce-vars", "-ftree-copy-prop", "-ftree-dce", "-ftree-dominator-opts", "-ftree-dse", "-ftree-forwprop", "-ftree-fre", "-ftree-loop-distribution", "-ftree-loop-distribute-patterns", "-ftree-loop-if-convert", "-ftree-loop-im", "-ftree-loop-ivcanon", "-ftree-loop-optimize", "-ftree-parallelize-loops=n", "-ftree-phiprop", "-ftree-pre", "-ftree-partial-pre", "-ftree-partial-pre-inc", "-ftree-reassoc", "-ftree-scev-cprop", "-ftree-slp-vectorize", "-ftree-sra", "-ftree-switch-conversion", "-ftree-tail-merge", "-ftree-ter", "-ftree-vrp", "-ftree-vectorize", "-funroll-loops", "-funroll-all-loops", "-funswitch-loops", "-fvect-cost-model", "-fvectorize", "-fwhole-program", "-fipa-cp-clone", "-fno-math-errno", "-fassociative-math", "-ffinite-math-only", "-ffp-contract=style", "-ftrapping-math", "-fwrapv", "-ftree-vectorizer-verbose=n", "-fno-stack-protector", "-fstack-protector", "-fstack-protector-all", "-fstack-protector-strong", "-fstack-protector-explicit", "-fno-stack-clash-protection", "-fsanitize=address", "-fsanitize=thread", "-fsanitize=memory", "-fsanitize=undefined", "-fsanitize=leak", "-fno-sanitize=address", "-fno-sanitize=thread", "-fno-sanitize=memory", "-fno-sanitize=undefined", "-fno-sanitize=leak", "-fsanitize-address-use-after-scope", "-fsanitize-memory-track-origins", "-fsanitize-memory-use-after-dtor", "-fsanitize-undefined-trap-on-error", "-fno-omit-frame-pointer", "-targetlibinfo", "-tti", "-tbaa", "-scoped-noalias", "-assumption-cache-tracker", "-profile-summary-info", "-forceattrs", "-inferattrs", "-ipsccp", "-called-value-propagation", "-globalopt", "-domtree", "-mem2reg", "-deadargelim", "-basicaa", "-aa", "-loops", "-lazy-branch-prob", "-lazy-block-freq", "-opt-remark-emitter", "-instcombine", "-simplifycfg", "-basiccg", "-globals-aa", "-prune-eh", "-always-inline", "-functionattrs", "-sroa", "-memoryssa", "-early-cse-memssa", "-speculative-execution", "-lazy-value-info", "-jump-threading", "-correlated-propagation", "-libcalls-shrinkwrap", "-branch-prob", "-block-freq", "-pgo-memop-opt", "-tailcallelim", "-reassociate", "-loop-simplify", "-lcssa-verification", "-lcssa", "-scalar-evolution", "-loop-rotate", "-licm", "-loop-unswitch", "-indvars", "-loop-idiom", "-loop-deletion", "-loop-unroll", "-memdep", "-memcpyopt", "-sccp", "-demanded-bits", "-bdce", "-dse", "-postdomtree", "-adce", "-barrier", "-rpo-functionattrs", "-globaldce", "-float2int", "-loop-accesses", "-loop-distribute", "-loop-vectorize", "-loop-load-elim", "-alignment-from-assumptions", "-strip-dead-prototypes", "-loop-sink", "-instsimplify", "-div-rem-pairs", "-verify", "-ee-instrument", "-early-cse"]

flags = ["-O0", "-O1", "-O2", "-O3", "-Os", "-Oz", "-Ofast", "-Og", "-fno-strict-aliasing", "-fstrict-aliasing", "-fno-builtin", "-ffast-math", "-ffinite-math-only", "-fno-signed-zeros", "-fno-trapping-math", "-ftrapping-math", "-funsafe-math-optimizations", "-fassociative-math", "-fno-math-errno", "-fno-rounding-math", "-freciprocal-math", "-fno-semantic-interposition", "-ffast-math", "-finline-functions", "-finline-hint-functions", "-fmerge-all-constants", "-fprofile-sample-use", "-fprofile-use", "-freciprocal-math", "-ftree-slp-vectorize", "-ftree-vectorize", "-funroll-loops", "-fvectorize", "-fno-math-errno", "-fno-trapping-math", "-fassociative-math", "-ffinite-math-only", "-fno-signed-zeros", "-ftrapping-math", "-fwrapv", "-fno-stack-protector", "-fstack-protector", "-fstack-protector-all", "-fstack-protector-strong", "-fno-stack-clash-protection", "-fsanitize=address", "-fsanitize=thread", "-fsanitize=memory", "-fsanitize=undefined", "-fsanitize=leak", "-fno-sanitize=address", "-fno-sanitize=thread", "-fno-sanitize=memory", "-fno-sanitize=undefined", "-fno-sanitize=leak", "-fsanitize-address-use-after-scope", "-fno-sanitize-address-use-after-scope", "-fsanitize-memory-track-origins", "-fno-sanitize-memory-track-origins", "-fsanitize-memory-use-after-dtor", "-fno-sanitize-memory-use-after-dtor", "-fsanitize-undefined-trap-on-error", "-fno-sanitize-undefined-trap-on-error", "-freciprocal-math", "-fno-semantic-interposition", "-fno-signed-zeros", "-fno-trapping-math", "-fwrapv", "-fomit-frame-pointer", "-fno-omit-frame-pointer"]

file_name = sys.argv[1]
output_path = "output/" + file_name
file = open(output_path)
final_flags = []

for line in file.readlines():
    words = line.split()
    for word in words:
        if word[0] == '-' and (word in flags):
            final_flags.append(word)

output = ""
for flag in final_flags:
    output += flag + " "
print(output)
